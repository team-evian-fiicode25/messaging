# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, AsyncIterator, Dict

from .async_base_client import AsyncBaseClient
from .email_verification_requested import EmailVerificationRequested
from .login_created import LoginCreated
from .phone_verification_requested import PhoneVerificationRequested


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def login_created(self, **kwargs: Any) -> AsyncIterator[LoginCreated]:
        query = gql(
            """
            subscription LoginCreated {
              login: loginCreated {
                __typename
                username
                phoneNumber {
                  __typename
                  number
                  verifyCode
                }
                email {
                  __typename
                  address
                  verifyToken
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        async for data in self.execute_ws(
            query=query, operation_name="LoginCreated", variables=variables, **kwargs
        ):
            yield LoginCreated.model_validate(data)

    async def email_verification_requested(
        self, **kwargs: Any
    ) -> AsyncIterator[EmailVerificationRequested]:
        query = gql(
            """
            subscription EmailVerificationRequested {
              login: emailVerificationRequested {
                __typename
                username
                email {
                  __typename
                  address
                  verifyToken
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        async for data in self.execute_ws(
            query=query,
            operation_name="EmailVerificationRequested",
            variables=variables,
            **kwargs
        ):
            yield EmailVerificationRequested.model_validate(data)

    async def phone_verification_requested(
        self, **kwargs: Any
    ) -> AsyncIterator[PhoneVerificationRequested]:
        query = gql(
            """
            subscription PhoneVerificationRequested {
              login: phoneVerificationRequested {
                __typename
                username
                phoneNumber {
                  __typename
                  number
                  verifyCode
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        async for data in self.execute_ws(
            query=query,
            operation_name="PhoneVerificationRequested",
            variables=variables,
            **kwargs
        ):
            yield PhoneVerificationRequested.model_validate(data)
