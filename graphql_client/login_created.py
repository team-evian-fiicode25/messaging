# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Literal, Optional

from pydantic import Field

from .base_model import BaseModel


class LoginCreated(BaseModel):
    login: "LoginCreatedLogin"


class LoginCreatedLogin(BaseModel):
    typename__: Literal["IQueryableLogin", "QueryableLogin"] = Field(alias="__typename")
    username: Optional[str]
    phone_number: Optional["LoginCreatedLoginPhoneNumber"] = Field(alias="phoneNumber")
    email: Optional["LoginCreatedLoginEmail"]


class LoginCreatedLoginPhoneNumber(BaseModel):
    typename__: Literal["IQueryablePhoneNumber", "QueryablePhoneNumber"] = Field(
        alias="__typename"
    )
    number: str
    verify_code: Optional[str] = Field(alias="verifyCode")


class LoginCreatedLoginEmail(BaseModel):
    typename__: Literal["IQueryableEmail", "QueryableEmail"] = Field(alias="__typename")
    address: str
    verify_token: Optional[str] = Field(alias="verifyToken")


LoginCreated.model_rebuild()
LoginCreatedLogin.model_rebuild()
