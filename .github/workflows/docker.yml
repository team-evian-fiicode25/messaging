name: Docker

on:
  repository_dispatch:
    types: [release]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TAG: ${{ github.event.client_payload.tag }}

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
    - name: Cleanup workspace path
      uses: mickem/clean-after-action@v1

    - name: Get Release data
      id: release_data
      uses: KevinRohn/github-full-release-data@v2
      with:
        version: ${{ env.TAG }}

    - name: Download source code
      id: get_build_context
      run: |
        wget -O source.tar.gz '${{ steps.release_data.outputs.tarball_url }}' && \
          tar -xvf source.tar.gz && cd "$(tar -tf source.tar.gz | head -n 1)"
        echo "build_context=$(pwd)" >> $GITHUB_OUTPUT

    - name: Install cosign
      uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
      with:
        cosign-release: 'v2.2.4'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

    - name: Log into registry ${{ env.REGISTRY }}
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
      with:
        context: ${{ steps.get_build_context.outputs.build_context }}
        platforms: linux/amd64,linux/arm64/v8
        push: True
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Sign the published Docker image
      env:
        TAGS: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
      run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
